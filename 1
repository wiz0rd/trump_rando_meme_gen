import os
import sys
import random
import pyperclip
import traceback
from tkinter import *
from tkinter import messagebox
from asciimatics.screen import Screen
from asciimatics.scene import Scene
from asciimatics.effects import Print
from asciimatics.renderers import FigletText, Rainbow, StaticRenderer
from asciimatics.exceptions import ResizeScreenError
from PIL import Image, ImageEnhance, ImageFilter

# Directories and files
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(SCRIPT_DIR, 'trump_pics')
GEN_IMAGES_DIR = os.path.join(SCRIPT_DIR, 'genImages')
PHRASES_FILE = os.path.join(SCRIPT_DIR, 'phrases.txt')

# Ensure genImages directory exists
os.makedirs(GEN_IMAGES_DIR, exist_ok=True)

# Load images and phrases
images = [f for f in os.listdir(IMAGES_DIR) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
with open(PHRASES_FILE, 'r') as f:
    phrases = [line.strip() for line in f]

# Global variables
meme_generated = False
current_meme = None

# Use fewer ASCII characters for better color rendering
ASCII_CHARS = "@%#*+=-:. "

def resize_image(image, new_width=80):
    """Resize image maintaining aspect ratio"""
    width, height = image.size
    ratio = height / width / 1.8  # Terminal characters are taller than wide
    new_height = int(new_width * ratio)
    resized_image = image.resize((new_width, new_height), Image.LANCZOS)
    return resized_image

def enhance_image(image):
    """Apply image enhancements to improve output quality"""
    # Increase contrast for better definition
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(1.3)
    
    # Increase color saturation slightly
    enhancer = ImageEnhance.Color(image)
    image = enhancer.enhance(1.2)
    
    # Sharpen the image slightly
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(1.2)
    
    return image

def rgb_to_ansi_color(r, g, b):
    """Convert RGB to the closest ANSI 256-color code"""
    if r == g == b:  # Grayscale
        if r < 8:
            return 16
        if r > 248:
            return 231
        return 232 + int((r - 8) / 247 * 24)
    
    # 6×6×6 RGB color cube
    return 16 + 36 * int(r / 256 * 6) + 6 * int(g / 256 * 6) + int(b / 256 * 6)

def pixel_to_ascii_with_color(pixel):
    """Convert pixel to ASCII character with color information"""
    if len(pixel) == 4:  # RGBA
        r, g, b, _ = pixel
    else:  # RGB
        r, g, b = pixel
    
    # Get brightness (0-255)
    brightness = (0.299 * r + 0.587 * g + 0.114 * b)
    
    # Map brightness to ASCII char
    ascii_char = ASCII_CHARS[min(int(brightness / 255 * (len(ASCII_CHARS) - 1)), len(ASCII_CHARS) - 1)]
    
    # Get ANSI color code
    color = rgb_to_ansi_color(r, g, b)
    
    return ascii_char, color

def img_to_color_ascii(image_path, new_width=80):
    """Convert image to color ASCII art"""
    try:
        # Open and process image
        image = Image.open(image_path)
        image = resize_image(image, new_width)
        image = enhance_image(image)
        
        # Convert to RGB if it's not already
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        width = image.width
        height = image.height
        
        # Create color ASCII art
        color_ascii = []
        for y in range(height):
            row = []
            for x in range(width):
                pixel = image.getpixel((x, y))
                char, color = pixel_to_ascii_with_color(pixel)
                row.append((char, color, 0))  # char, fg_color, bg_color
            color_ascii.append(row)
            # Add newline at end of each row
            color_ascii.append([('\n', 7, 0)])
        
        return color_ascii
    except Exception as e:
        print(f"Error converting image to color ASCII: {str(e)}")
        return [[('Error: Failed to convert image', 7, 0)]]

def generate_meme(screen):
    global meme_generated, current_meme
    meme_generated = True
    
    # Select random image and phrase
    image = random.choice(images)
    phrase = random.choice(phrases)
    current_meme = (image, phrase)
    
    # Generate color ASCII art
    image_path = os.path.join(IMAGES_DIR, image)
    screen_width = min(80, screen.width)
    color_ascii = img_to_color_ascii(image_path, new_width=screen_width)
    
    # Create scene with color ASCII art and phrase
    effects = [
        Print(screen, StaticRenderer(images=[color_ascii]), 0, 
              colour_map=True),  # Use color mapping
        Print(screen,
              Rainbow(screen, FigletText(phrase, font='small')),
              screen.height - 8,  # Position text near the bottom
              speed=1,
              start_frame=20)
    ]
    
    scene = Scene(effects, -1)
    screen.play([scene], stop_on_resize=True, repeat=False)

def meme_loop():
    while True:
        try:
            Screen.wrapper(generate_meme)
            break
        except ResizeScreenError:
            pass

def on_generate_meme():
    meme_loop()

def on_save_meme():
    global current_meme
    if not meme_generated or not current_meme:
        messagebox.showinfo("Info", "Please generate a meme first.")
        return
    
    image, phrase = current_meme
    save_path = os.path.join(GEN_IMAGES_DIR, f"meme_{random.randint(1000, 9999)}.txt")
    
    # For saving, we'll use plain ASCII art
    image_path = os.path.join(IMAGES_DIR, image)
    
    # Create a simplified ASCII art without color for saving
    image_obj = Image.open(image_path)
    image_obj = resize_image(image_obj, new_width=100)
    image_obj = enhance_image(image_obj)
    image_obj = image_obj.convert('L')  # Convert to grayscale
    
    # Generate plain ASCII art
    pixels = list(image_obj.getdata())
    width = image_obj.width
    ascii_art = []
    
    for i in range(0, len(pixels), width):
        row_pixels = pixels[i:i+width]
        row_chars = [ASCII_CHARS[min(int(pixel / 255 * (len(ASCII_CHARS) - 1)), len(ASCII_CHARS) - 1)] for pixel in row_pixels]
        ascii_art.append(''.join(row_chars))
    
    ascii_art_str = '\n'.join(ascii_art)
    
    meme_info = f"Image: {image}\nPhrase: {phrase}\n\n{ascii_art_str}"
    
    try:
        print(f"Attempting to save meme to: {save_path}")
        
        with open(save_path, 'w') as f:
            f.write(meme_info)
        
        print("File written successfully")
        
        pyperclip.copy(meme_info)
        
        print("Copied to clipboard")
        
        messagebox.showinfo("Success", f"Meme saved to {save_path} and copied to clipboard.")
    except Exception as e:
        error_message = f"Failed to save meme: {str(e)}\n"
        error_message += f"Current working directory: {os.getcwd()}\n"
        error_message += f"GEN_IMAGES_DIR: {GEN_IMAGES_DIR}\n"
        error_message += f"Does GEN_IMAGES_DIR exist? {os.path.exists(GEN_IMAGES_DIR)}\n"
        error_message += "Traceback:\n" + traceback.format_exc()
        print(error_message)
        messagebox.showerror("Error", error_message)

def on_quit():
    window.quit()
    window.destroy()
    sys.exit()

# Create main window
window = Tk()
window.title("Trump Meme Generator")
window.configure(bg="black")

# Load and display splash image
try:
    splash_image = PhotoImage(file=os.path.join(SCRIPT_DIR, "trumpsplash.gif"))
    Label(window, image=splash_image, bg="black").pack(pady=10)
except Exception as e:
    print(f"Error loading splash image: {str(e)}")
    Label(window, text="Trump Meme Generator", font=("Arial", 20), fg="white", bg="black").pack(pady=20)

# Create buttons
Button(window, text="Generate Meme", command=on_generate_meme, width=20).pack(pady=5)
Button(window, text="Save Meme", command=on_save_meme, width=20).pack(pady=5)
Button(window, text="Quit", command=on_quit, width=20).pack(pady=5)

if __name__ == "__main__":
    window.mainloop()
